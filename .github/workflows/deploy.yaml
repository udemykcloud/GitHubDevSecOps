deploy:
  needs: docker
  name: Deploy to EKS
  runs-on: ubuntu-latest
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name your-eks-cluster --region ${{ secrets.AWS_REGION }}

    - name: Deploy to EKS
      run: |
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: demoapp
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: demoapp
          template:
            metadata:
              labels:
                app: demoapp
            spec:
              containers:
              - name: demoapp
                image: ${{ needs.docker.outputs.image-tag }}
                ports:
                - containerPort: 8080
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: demoapp-svc
        spec:
          type: LoadBalancer
          selector:
            app: demoapp
          ports:
          - port: 80
            targetPort: 8080
        EOF

    - name: Wait for LoadBalancer URL
      id: get-lb
      run: |
        echo "Waiting for LoadBalancer external DNS..."
        for i in {1..30}; do
          LB=$(kubectl get svc demoapp-svc -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          if [ ! -z "$LB" ]; then
            echo "APP_URL=http://$LB" >> $GITHUB_ENV
            exit 0
          fi
          sleep 20
        done
        echo "Timed out waiting for LoadBalancer"
        exit 1
